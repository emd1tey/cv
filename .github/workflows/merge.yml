name: Check code with automerge

on:
  push:
    branches: [dev]

permissions:
  pull-requests: write
  contents: write
  statuses: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      - run: |
          pip install --upgrade pip && pip install poetry
          poetry config virtualenvs.create false
          poetry install --only main --no-interaction --no-ansi

      - name: Run code quality checks
        run: ruff check .

      - name: Run tests
        run: pytest

  create-merge-request:
    runs-on: ubuntu-latest
    needs: build
    if: success()
    outputs:
      pr_url: ${{ steps.create_pr.outputs.pr_url }}
      pr_number: ${{ steps.create_pr.outputs.pr_number }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Merge Request
        id: create_pr
        uses: repo-sync/pull-request@v2
        with:
          destination_branch: main
          source_branch: ${{ github.ref }}
          pr_title: Merge ${{ github.ref }} into main
          pr_body: Automated merge request from ${{ github.ref }} branch.

      - name: Set output
        run: echo "${{ steps.create_pr.outputs.pr_url }}"

  approve-merge-request:
    runs-on: ubuntu-latest
    needs: create-merge-request
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Close PR if merged
        env:
          PR_URL: ${{ needs.create-merge-request.outputs.pr_url }}
          PR_NUMBER: ${{ needs.create-merge-request.outputs.pr_number }}
          GH_TOKEN: ${{ github.token }}
        run: gh pr merge "$PR_URL" --merge



#  dump_contexts_to_log:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Dump GitHub context
#        env:
#          GITHUB_CONTEXT: ${{ toJson(github) }}
#        run: echo "$GITHUB_CONTEXT"
#      - name: Dump job context
#        env:
#          JOB_CONTEXT: ${{ toJson(job) }}
#        run: echo "$JOB_CONTEXT"
#      - name: Dump steps context
#        env:
#          STEPS_CONTEXT: ${{ toJson(steps) }}
#        run: echo "$STEPS_CONTEXT"
#      - name: Dump runner context
#        env:
#          RUNNER_CONTEXT: ${{ toJson(runner) }}
#        run: echo "$RUNNER_CONTEXT"
#      - name: Dump strategy context
#        env:
#          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
#        run: echo "$STRATEGY_CONTEXT"
#