name: CI
on:
  push:
    branches: [dev]


permissions:
  pull-requests: write
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      - run: |
          pip install --upgrade pip && pip install poetry
          poetry config virtualenvs.create false
          poetry install --only main --no-interaction --no-ansi

      - name: Run code quality checks
        run: ruff check .

      - name: Run tests
        run: pytest

  create-merge-request:
    runs-on: ubuntu-latest
    needs: build
    if: success()

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create Merge Request
        uses: repo-sync/pull-request@v2
        with:
          destination_branch: main
          source_branch: ${{ github.ref }}
          title: Merge ${{ github.ref }} into main
          body: Automated merge request from ${{ github.ref }} branch.

  approve-merge-request:
    runs-on: ubuntu-latest
    needs: create-merge-request
    if: success()

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Approve Merge Request
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/${{ github.repository }}/pulls/${{ needs.create-merge-request.outputs.pull_request_number }}/reviews
          mediaType: |
            {
              "accept": "application/vnd.github.v3+json"
            }
          github_token: ${{ secrets.GITHUB_TOKEN }}



  debug:
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "$MATRIX_CONTEXT"
